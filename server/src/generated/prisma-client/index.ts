// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  match: (where?: MatchWhereInput) => Promise<boolean>;
  player: (where?: PlayerWhereInput) => Promise<boolean>;
  schedule: (where?: ScheduleWhereInput) => Promise<boolean>;
  season: (where?: SeasonWhereInput) => Promise<boolean>;
  team: (where?: TeamWhereInput) => Promise<boolean>;
  tournament: (where?: TournamentWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  match: (where: MatchWhereUniqueInput) => MatchNullablePromise;
  matches: (args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Match>;
  matchesConnection: (args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MatchConnectionPromise;
  player: (where: PlayerWhereUniqueInput) => PlayerNullablePromise;
  players: (args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Player>;
  playersConnection: (args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlayerConnectionPromise;
  schedule: (where: ScheduleWhereUniqueInput) => ScheduleNullablePromise;
  schedules: (args?: {
    where?: ScheduleWhereInput;
    orderBy?: ScheduleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Schedule>;
  schedulesConnection: (args?: {
    where?: ScheduleWhereInput;
    orderBy?: ScheduleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ScheduleConnectionPromise;
  season: (where: SeasonWhereUniqueInput) => SeasonNullablePromise;
  seasons: (args?: {
    where?: SeasonWhereInput;
    orderBy?: SeasonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Season>;
  seasonsConnection: (args?: {
    where?: SeasonWhereInput;
    orderBy?: SeasonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SeasonConnectionPromise;
  team: (where: TeamWhereUniqueInput) => TeamNullablePromise;
  teams: (args?: {
    where?: TeamWhereInput;
    orderBy?: TeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Team>;
  teamsConnection: (args?: {
    where?: TeamWhereInput;
    orderBy?: TeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TeamConnectionPromise;
  tournament: (where: TournamentWhereUniqueInput) => TournamentNullablePromise;
  tournaments: (args?: {
    where?: TournamentWhereInput;
    orderBy?: TournamentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tournament>;
  tournamentsConnection: (args?: {
    where?: TournamentWhereInput;
    orderBy?: TournamentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TournamentConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createMatch: (data: MatchCreateInput) => MatchPromise;
  updateMatch: (args: {
    data: MatchUpdateInput;
    where: MatchWhereUniqueInput;
  }) => MatchPromise;
  upsertMatch: (args: {
    where: MatchWhereUniqueInput;
    create: MatchCreateInput;
    update: MatchUpdateInput;
  }) => MatchPromise;
  deleteMatch: (where: MatchWhereUniqueInput) => MatchPromise;
  deleteManyMatches: (where?: MatchWhereInput) => BatchPayloadPromise;
  createPlayer: (data: PlayerCreateInput) => PlayerPromise;
  updatePlayer: (args: {
    data: PlayerUpdateInput;
    where: PlayerWhereUniqueInput;
  }) => PlayerPromise;
  updateManyPlayers: (args: {
    data: PlayerUpdateManyMutationInput;
    where?: PlayerWhereInput;
  }) => BatchPayloadPromise;
  upsertPlayer: (args: {
    where: PlayerWhereUniqueInput;
    create: PlayerCreateInput;
    update: PlayerUpdateInput;
  }) => PlayerPromise;
  deletePlayer: (where: PlayerWhereUniqueInput) => PlayerPromise;
  deleteManyPlayers: (where?: PlayerWhereInput) => BatchPayloadPromise;
  createSchedule: (data: ScheduleCreateInput) => SchedulePromise;
  updateSchedule: (args: {
    data: ScheduleUpdateInput;
    where: ScheduleWhereUniqueInput;
  }) => SchedulePromise;
  updateManySchedules: (args: {
    data: ScheduleUpdateManyMutationInput;
    where?: ScheduleWhereInput;
  }) => BatchPayloadPromise;
  upsertSchedule: (args: {
    where: ScheduleWhereUniqueInput;
    create: ScheduleCreateInput;
    update: ScheduleUpdateInput;
  }) => SchedulePromise;
  deleteSchedule: (where: ScheduleWhereUniqueInput) => SchedulePromise;
  deleteManySchedules: (where?: ScheduleWhereInput) => BatchPayloadPromise;
  createSeason: (data: SeasonCreateInput) => SeasonPromise;
  updateSeason: (args: {
    data: SeasonUpdateInput;
    where: SeasonWhereUniqueInput;
  }) => SeasonPromise;
  updateManySeasons: (args: {
    data: SeasonUpdateManyMutationInput;
    where?: SeasonWhereInput;
  }) => BatchPayloadPromise;
  upsertSeason: (args: {
    where: SeasonWhereUniqueInput;
    create: SeasonCreateInput;
    update: SeasonUpdateInput;
  }) => SeasonPromise;
  deleteSeason: (where: SeasonWhereUniqueInput) => SeasonPromise;
  deleteManySeasons: (where?: SeasonWhereInput) => BatchPayloadPromise;
  createTeam: (data: TeamCreateInput) => TeamPromise;
  updateTeam: (args: {
    data: TeamUpdateInput;
    where: TeamWhereUniqueInput;
  }) => TeamPromise;
  updateManyTeams: (args: {
    data: TeamUpdateManyMutationInput;
    where?: TeamWhereInput;
  }) => BatchPayloadPromise;
  upsertTeam: (args: {
    where: TeamWhereUniqueInput;
    create: TeamCreateInput;
    update: TeamUpdateInput;
  }) => TeamPromise;
  deleteTeam: (where: TeamWhereUniqueInput) => TeamPromise;
  deleteManyTeams: (where?: TeamWhereInput) => BatchPayloadPromise;
  createTournament: (data: TournamentCreateInput) => TournamentPromise;
  updateTournament: (args: {
    data: TournamentUpdateInput;
    where: TournamentWhereUniqueInput;
  }) => TournamentPromise;
  updateManyTournaments: (args: {
    data: TournamentUpdateManyMutationInput;
    where?: TournamentWhereInput;
  }) => BatchPayloadPromise;
  upsertTournament: (args: {
    where: TournamentWhereUniqueInput;
    create: TournamentCreateInput;
    update: TournamentUpdateInput;
  }) => TournamentPromise;
  deleteTournament: (where: TournamentWhereUniqueInput) => TournamentPromise;
  deleteManyTournaments: (where?: TournamentWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  match: (
    where?: MatchSubscriptionWhereInput
  ) => MatchSubscriptionPayloadSubscription;
  player: (
    where?: PlayerSubscriptionWhereInput
  ) => PlayerSubscriptionPayloadSubscription;
  schedule: (
    where?: ScheduleSubscriptionWhereInput
  ) => ScheduleSubscriptionPayloadSubscription;
  season: (
    where?: SeasonSubscriptionWhereInput
  ) => SeasonSubscriptionPayloadSubscription;
  team: (
    where?: TeamSubscriptionWhereInput
  ) => TeamSubscriptionPayloadSubscription;
  tournament: (
    where?: TournamentSubscriptionWhereInput
  ) => TournamentSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TournamentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC";

export type TeamOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type SeasonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type ScheduleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "week_ASC"
  | "week_DESC";

export type MatchOrderByInput = "id_ASC" | "id_DESC";

export type PlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type MatchWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TournamentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  start_not?: Maybe<DateTimeInput>;
  start_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_lt?: Maybe<DateTimeInput>;
  start_lte?: Maybe<DateTimeInput>;
  start_gt?: Maybe<DateTimeInput>;
  start_gte?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  end_not?: Maybe<DateTimeInput>;
  end_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_lt?: Maybe<DateTimeInput>;
  end_lte?: Maybe<DateTimeInput>;
  end_gt?: Maybe<DateTimeInput>;
  end_gte?: Maybe<DateTimeInput>;
  teams_every?: Maybe<TeamWhereInput>;
  teams_some?: Maybe<TeamWhereInput>;
  teams_none?: Maybe<TeamWhereInput>;
  seasons_every?: Maybe<SeasonWhereInput>;
  seasons_some?: Maybe<SeasonWhereInput>;
  seasons_none?: Maybe<SeasonWhereInput>;
  AND?: Maybe<TournamentWhereInput[] | TournamentWhereInput>;
  OR?: Maybe<TournamentWhereInput[] | TournamentWhereInput>;
  NOT?: Maybe<TournamentWhereInput[] | TournamentWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  tournaments_every?: Maybe<TournamentWhereInput>;
  tournaments_some?: Maybe<TournamentWhereInput>;
  tournaments_none?: Maybe<TournamentWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface TeamWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  tournament?: Maybe<TournamentWhereInput>;
  players_every?: Maybe<PlayerWhereInput>;
  players_some?: Maybe<PlayerWhereInput>;
  players_none?: Maybe<PlayerWhereInput>;
  AND?: Maybe<TeamWhereInput[] | TeamWhereInput>;
  OR?: Maybe<TeamWhereInput[] | TeamWhereInput>;
  NOT?: Maybe<TeamWhereInput[] | TeamWhereInput>;
}

export interface PlayerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  team?: Maybe<TeamWhereInput>;
  AND?: Maybe<PlayerWhereInput[] | PlayerWhereInput>;
  OR?: Maybe<PlayerWhereInput[] | PlayerWhereInput>;
  NOT?: Maybe<PlayerWhereInput[] | PlayerWhereInput>;
}

export interface SeasonWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  schedules_every?: Maybe<ScheduleWhereInput>;
  schedules_some?: Maybe<ScheduleWhereInput>;
  schedules_none?: Maybe<ScheduleWhereInput>;
  tournament?: Maybe<TournamentWhereInput>;
  AND?: Maybe<SeasonWhereInput[] | SeasonWhereInput>;
  OR?: Maybe<SeasonWhereInput[] | SeasonWhereInput>;
  NOT?: Maybe<SeasonWhereInput[] | SeasonWhereInput>;
}

export interface ScheduleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  week?: Maybe<Int>;
  week_not?: Maybe<Int>;
  week_in?: Maybe<Int[] | Int>;
  week_not_in?: Maybe<Int[] | Int>;
  week_lt?: Maybe<Int>;
  week_lte?: Maybe<Int>;
  week_gt?: Maybe<Int>;
  week_gte?: Maybe<Int>;
  matches_every?: Maybe<MatchWhereInput>;
  matches_some?: Maybe<MatchWhereInput>;
  matches_none?: Maybe<MatchWhereInput>;
  season?: Maybe<SeasonWhereInput>;
  AND?: Maybe<ScheduleWhereInput[] | ScheduleWhereInput>;
  OR?: Maybe<ScheduleWhereInput[] | ScheduleWhereInput>;
  NOT?: Maybe<ScheduleWhereInput[] | ScheduleWhereInput>;
}

export interface MatchWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  teamA?: Maybe<TeamWhereInput>;
  teamB?: Maybe<TeamWhereInput>;
  schedule?: Maybe<ScheduleWhereInput>;
  AND?: Maybe<MatchWhereInput[] | MatchWhereInput>;
  OR?: Maybe<MatchWhereInput[] | MatchWhereInput>;
  NOT?: Maybe<MatchWhereInput[] | MatchWhereInput>;
}

export type PlayerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ScheduleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SeasonWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TeamWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TournamentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MatchCreateInput {
  id?: Maybe<ID_Input>;
  teamA: TeamCreateOneInput;
  teamB: TeamCreateOneInput;
  schedule: ScheduleCreateOneWithoutMatchesInput;
}

export interface TeamCreateOneInput {
  create?: Maybe<TeamCreateInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface TeamCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  tournament: TournamentCreateOneWithoutTeamsInput;
  players?: Maybe<PlayerCreateManyWithoutTeamInput>;
}

export interface TournamentCreateOneWithoutTeamsInput {
  create?: Maybe<TournamentCreateWithoutTeamsInput>;
  connect?: Maybe<TournamentWhereUniqueInput>;
}

export interface TournamentCreateWithoutTeamsInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutTournamentsInput;
  name: String;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  seasons?: Maybe<SeasonCreateManyWithoutTournamentInput>;
}

export interface UserCreateOneWithoutTournamentsInput {
  create?: Maybe<UserCreateWithoutTournamentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutTournamentsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface SeasonCreateManyWithoutTournamentInput {
  create?: Maybe<
    SeasonCreateWithoutTournamentInput[] | SeasonCreateWithoutTournamentInput
  >;
  connect?: Maybe<SeasonWhereUniqueInput[] | SeasonWhereUniqueInput>;
}

export interface SeasonCreateWithoutTournamentInput {
  id?: Maybe<ID_Input>;
  name: String;
  schedules?: Maybe<ScheduleCreateManyWithoutSeasonInput>;
}

export interface ScheduleCreateManyWithoutSeasonInput {
  create?: Maybe<
    ScheduleCreateWithoutSeasonInput[] | ScheduleCreateWithoutSeasonInput
  >;
  connect?: Maybe<ScheduleWhereUniqueInput[] | ScheduleWhereUniqueInput>;
}

export interface ScheduleCreateWithoutSeasonInput {
  id?: Maybe<ID_Input>;
  week?: Maybe<Int>;
  matches?: Maybe<MatchCreateManyWithoutScheduleInput>;
}

export interface MatchCreateManyWithoutScheduleInput {
  create?: Maybe<
    MatchCreateWithoutScheduleInput[] | MatchCreateWithoutScheduleInput
  >;
  connect?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
}

export interface MatchCreateWithoutScheduleInput {
  id?: Maybe<ID_Input>;
  teamA: TeamCreateOneInput;
  teamB: TeamCreateOneInput;
}

export interface PlayerCreateManyWithoutTeamInput {
  create?: Maybe<PlayerCreateWithoutTeamInput[] | PlayerCreateWithoutTeamInput>;
  connect?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
}

export interface PlayerCreateWithoutTeamInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ScheduleCreateOneWithoutMatchesInput {
  create?: Maybe<ScheduleCreateWithoutMatchesInput>;
  connect?: Maybe<ScheduleWhereUniqueInput>;
}

export interface ScheduleCreateWithoutMatchesInput {
  id?: Maybe<ID_Input>;
  week?: Maybe<Int>;
  season: SeasonCreateOneWithoutSchedulesInput;
}

export interface SeasonCreateOneWithoutSchedulesInput {
  create?: Maybe<SeasonCreateWithoutSchedulesInput>;
  connect?: Maybe<SeasonWhereUniqueInput>;
}

export interface SeasonCreateWithoutSchedulesInput {
  id?: Maybe<ID_Input>;
  name: String;
  tournament: TournamentCreateOneWithoutSeasonsInput;
}

export interface TournamentCreateOneWithoutSeasonsInput {
  create?: Maybe<TournamentCreateWithoutSeasonsInput>;
  connect?: Maybe<TournamentWhereUniqueInput>;
}

export interface TournamentCreateWithoutSeasonsInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutTournamentsInput;
  name: String;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  teams?: Maybe<TeamCreateManyWithoutTournamentInput>;
}

export interface TeamCreateManyWithoutTournamentInput {
  create?: Maybe<
    TeamCreateWithoutTournamentInput[] | TeamCreateWithoutTournamentInput
  >;
  connect?: Maybe<TeamWhereUniqueInput[] | TeamWhereUniqueInput>;
}

export interface TeamCreateWithoutTournamentInput {
  id?: Maybe<ID_Input>;
  name: String;
  players?: Maybe<PlayerCreateManyWithoutTeamInput>;
}

export interface MatchUpdateInput {
  teamA?: Maybe<TeamUpdateOneRequiredInput>;
  teamB?: Maybe<TeamUpdateOneRequiredInput>;
  schedule?: Maybe<ScheduleUpdateOneRequiredWithoutMatchesInput>;
}

export interface TeamUpdateOneRequiredInput {
  create?: Maybe<TeamCreateInput>;
  update?: Maybe<TeamUpdateDataInput>;
  upsert?: Maybe<TeamUpsertNestedInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface TeamUpdateDataInput {
  name?: Maybe<String>;
  tournament?: Maybe<TournamentUpdateOneRequiredWithoutTeamsInput>;
  players?: Maybe<PlayerUpdateManyWithoutTeamInput>;
}

export interface TournamentUpdateOneRequiredWithoutTeamsInput {
  create?: Maybe<TournamentCreateWithoutTeamsInput>;
  update?: Maybe<TournamentUpdateWithoutTeamsDataInput>;
  upsert?: Maybe<TournamentUpsertWithoutTeamsInput>;
  connect?: Maybe<TournamentWhereUniqueInput>;
}

export interface TournamentUpdateWithoutTeamsDataInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutTournamentsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  seasons?: Maybe<SeasonUpdateManyWithoutTournamentInput>;
}

export interface UserUpdateOneRequiredWithoutTournamentsInput {
  create?: Maybe<UserCreateWithoutTournamentsInput>;
  update?: Maybe<UserUpdateWithoutTournamentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutTournamentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutTournamentsDataInput {
  name?: Maybe<String>;
}

export interface UserUpsertWithoutTournamentsInput {
  update: UserUpdateWithoutTournamentsDataInput;
  create: UserCreateWithoutTournamentsInput;
}

export interface SeasonUpdateManyWithoutTournamentInput {
  create?: Maybe<
    SeasonCreateWithoutTournamentInput[] | SeasonCreateWithoutTournamentInput
  >;
  delete?: Maybe<SeasonWhereUniqueInput[] | SeasonWhereUniqueInput>;
  connect?: Maybe<SeasonWhereUniqueInput[] | SeasonWhereUniqueInput>;
  set?: Maybe<SeasonWhereUniqueInput[] | SeasonWhereUniqueInput>;
  disconnect?: Maybe<SeasonWhereUniqueInput[] | SeasonWhereUniqueInput>;
  update?: Maybe<
    | SeasonUpdateWithWhereUniqueWithoutTournamentInput[]
    | SeasonUpdateWithWhereUniqueWithoutTournamentInput
  >;
  upsert?: Maybe<
    | SeasonUpsertWithWhereUniqueWithoutTournamentInput[]
    | SeasonUpsertWithWhereUniqueWithoutTournamentInput
  >;
  deleteMany?: Maybe<SeasonScalarWhereInput[] | SeasonScalarWhereInput>;
  updateMany?: Maybe<
    | SeasonUpdateManyWithWhereNestedInput[]
    | SeasonUpdateManyWithWhereNestedInput
  >;
}

export interface SeasonUpdateWithWhereUniqueWithoutTournamentInput {
  where: SeasonWhereUniqueInput;
  data: SeasonUpdateWithoutTournamentDataInput;
}

export interface SeasonUpdateWithoutTournamentDataInput {
  name?: Maybe<String>;
  schedules?: Maybe<ScheduleUpdateManyWithoutSeasonInput>;
}

export interface ScheduleUpdateManyWithoutSeasonInput {
  create?: Maybe<
    ScheduleCreateWithoutSeasonInput[] | ScheduleCreateWithoutSeasonInput
  >;
  delete?: Maybe<ScheduleWhereUniqueInput[] | ScheduleWhereUniqueInput>;
  connect?: Maybe<ScheduleWhereUniqueInput[] | ScheduleWhereUniqueInput>;
  set?: Maybe<ScheduleWhereUniqueInput[] | ScheduleWhereUniqueInput>;
  disconnect?: Maybe<ScheduleWhereUniqueInput[] | ScheduleWhereUniqueInput>;
  update?: Maybe<
    | ScheduleUpdateWithWhereUniqueWithoutSeasonInput[]
    | ScheduleUpdateWithWhereUniqueWithoutSeasonInput
  >;
  upsert?: Maybe<
    | ScheduleUpsertWithWhereUniqueWithoutSeasonInput[]
    | ScheduleUpsertWithWhereUniqueWithoutSeasonInput
  >;
  deleteMany?: Maybe<ScheduleScalarWhereInput[] | ScheduleScalarWhereInput>;
  updateMany?: Maybe<
    | ScheduleUpdateManyWithWhereNestedInput[]
    | ScheduleUpdateManyWithWhereNestedInput
  >;
}

export interface ScheduleUpdateWithWhereUniqueWithoutSeasonInput {
  where: ScheduleWhereUniqueInput;
  data: ScheduleUpdateWithoutSeasonDataInput;
}

export interface ScheduleUpdateWithoutSeasonDataInput {
  week?: Maybe<Int>;
  matches?: Maybe<MatchUpdateManyWithoutScheduleInput>;
}

export interface MatchUpdateManyWithoutScheduleInput {
  create?: Maybe<
    MatchCreateWithoutScheduleInput[] | MatchCreateWithoutScheduleInput
  >;
  delete?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  connect?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  set?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  disconnect?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  update?: Maybe<
    | MatchUpdateWithWhereUniqueWithoutScheduleInput[]
    | MatchUpdateWithWhereUniqueWithoutScheduleInput
  >;
  upsert?: Maybe<
    | MatchUpsertWithWhereUniqueWithoutScheduleInput[]
    | MatchUpsertWithWhereUniqueWithoutScheduleInput
  >;
  deleteMany?: Maybe<MatchScalarWhereInput[] | MatchScalarWhereInput>;
}

export interface MatchUpdateWithWhereUniqueWithoutScheduleInput {
  where: MatchWhereUniqueInput;
  data: MatchUpdateWithoutScheduleDataInput;
}

export interface MatchUpdateWithoutScheduleDataInput {
  teamA?: Maybe<TeamUpdateOneRequiredInput>;
  teamB?: Maybe<TeamUpdateOneRequiredInput>;
}

export interface MatchUpsertWithWhereUniqueWithoutScheduleInput {
  where: MatchWhereUniqueInput;
  update: MatchUpdateWithoutScheduleDataInput;
  create: MatchCreateWithoutScheduleInput;
}

export interface MatchScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<MatchScalarWhereInput[] | MatchScalarWhereInput>;
  OR?: Maybe<MatchScalarWhereInput[] | MatchScalarWhereInput>;
  NOT?: Maybe<MatchScalarWhereInput[] | MatchScalarWhereInput>;
}

export interface ScheduleUpsertWithWhereUniqueWithoutSeasonInput {
  where: ScheduleWhereUniqueInput;
  update: ScheduleUpdateWithoutSeasonDataInput;
  create: ScheduleCreateWithoutSeasonInput;
}

export interface ScheduleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  week?: Maybe<Int>;
  week_not?: Maybe<Int>;
  week_in?: Maybe<Int[] | Int>;
  week_not_in?: Maybe<Int[] | Int>;
  week_lt?: Maybe<Int>;
  week_lte?: Maybe<Int>;
  week_gt?: Maybe<Int>;
  week_gte?: Maybe<Int>;
  AND?: Maybe<ScheduleScalarWhereInput[] | ScheduleScalarWhereInput>;
  OR?: Maybe<ScheduleScalarWhereInput[] | ScheduleScalarWhereInput>;
  NOT?: Maybe<ScheduleScalarWhereInput[] | ScheduleScalarWhereInput>;
}

export interface ScheduleUpdateManyWithWhereNestedInput {
  where: ScheduleScalarWhereInput;
  data: ScheduleUpdateManyDataInput;
}

export interface ScheduleUpdateManyDataInput {
  week?: Maybe<Int>;
}

export interface SeasonUpsertWithWhereUniqueWithoutTournamentInput {
  where: SeasonWhereUniqueInput;
  update: SeasonUpdateWithoutTournamentDataInput;
  create: SeasonCreateWithoutTournamentInput;
}

export interface SeasonScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<SeasonScalarWhereInput[] | SeasonScalarWhereInput>;
  OR?: Maybe<SeasonScalarWhereInput[] | SeasonScalarWhereInput>;
  NOT?: Maybe<SeasonScalarWhereInput[] | SeasonScalarWhereInput>;
}

export interface SeasonUpdateManyWithWhereNestedInput {
  where: SeasonScalarWhereInput;
  data: SeasonUpdateManyDataInput;
}

export interface SeasonUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface TournamentUpsertWithoutTeamsInput {
  update: TournamentUpdateWithoutTeamsDataInput;
  create: TournamentCreateWithoutTeamsInput;
}

export interface PlayerUpdateManyWithoutTeamInput {
  create?: Maybe<PlayerCreateWithoutTeamInput[] | PlayerCreateWithoutTeamInput>;
  delete?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
  connect?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
  set?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
  disconnect?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
  update?: Maybe<
    | PlayerUpdateWithWhereUniqueWithoutTeamInput[]
    | PlayerUpdateWithWhereUniqueWithoutTeamInput
  >;
  upsert?: Maybe<
    | PlayerUpsertWithWhereUniqueWithoutTeamInput[]
    | PlayerUpsertWithWhereUniqueWithoutTeamInput
  >;
  deleteMany?: Maybe<PlayerScalarWhereInput[] | PlayerScalarWhereInput>;
  updateMany?: Maybe<
    | PlayerUpdateManyWithWhereNestedInput[]
    | PlayerUpdateManyWithWhereNestedInput
  >;
}

export interface PlayerUpdateWithWhereUniqueWithoutTeamInput {
  where: PlayerWhereUniqueInput;
  data: PlayerUpdateWithoutTeamDataInput;
}

export interface PlayerUpdateWithoutTeamDataInput {
  name?: Maybe<String>;
}

export interface PlayerUpsertWithWhereUniqueWithoutTeamInput {
  where: PlayerWhereUniqueInput;
  update: PlayerUpdateWithoutTeamDataInput;
  create: PlayerCreateWithoutTeamInput;
}

export interface PlayerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<PlayerScalarWhereInput[] | PlayerScalarWhereInput>;
  OR?: Maybe<PlayerScalarWhereInput[] | PlayerScalarWhereInput>;
  NOT?: Maybe<PlayerScalarWhereInput[] | PlayerScalarWhereInput>;
}

export interface PlayerUpdateManyWithWhereNestedInput {
  where: PlayerScalarWhereInput;
  data: PlayerUpdateManyDataInput;
}

export interface PlayerUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface TeamUpsertNestedInput {
  update: TeamUpdateDataInput;
  create: TeamCreateInput;
}

export interface ScheduleUpdateOneRequiredWithoutMatchesInput {
  create?: Maybe<ScheduleCreateWithoutMatchesInput>;
  update?: Maybe<ScheduleUpdateWithoutMatchesDataInput>;
  upsert?: Maybe<ScheduleUpsertWithoutMatchesInput>;
  connect?: Maybe<ScheduleWhereUniqueInput>;
}

export interface ScheduleUpdateWithoutMatchesDataInput {
  week?: Maybe<Int>;
  season?: Maybe<SeasonUpdateOneRequiredWithoutSchedulesInput>;
}

export interface SeasonUpdateOneRequiredWithoutSchedulesInput {
  create?: Maybe<SeasonCreateWithoutSchedulesInput>;
  update?: Maybe<SeasonUpdateWithoutSchedulesDataInput>;
  upsert?: Maybe<SeasonUpsertWithoutSchedulesInput>;
  connect?: Maybe<SeasonWhereUniqueInput>;
}

export interface SeasonUpdateWithoutSchedulesDataInput {
  name?: Maybe<String>;
  tournament?: Maybe<TournamentUpdateOneRequiredWithoutSeasonsInput>;
}

export interface TournamentUpdateOneRequiredWithoutSeasonsInput {
  create?: Maybe<TournamentCreateWithoutSeasonsInput>;
  update?: Maybe<TournamentUpdateWithoutSeasonsDataInput>;
  upsert?: Maybe<TournamentUpsertWithoutSeasonsInput>;
  connect?: Maybe<TournamentWhereUniqueInput>;
}

export interface TournamentUpdateWithoutSeasonsDataInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutTournamentsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  teams?: Maybe<TeamUpdateManyWithoutTournamentInput>;
}

export interface TeamUpdateManyWithoutTournamentInput {
  create?: Maybe<
    TeamCreateWithoutTournamentInput[] | TeamCreateWithoutTournamentInput
  >;
  delete?: Maybe<TeamWhereUniqueInput[] | TeamWhereUniqueInput>;
  connect?: Maybe<TeamWhereUniqueInput[] | TeamWhereUniqueInput>;
  set?: Maybe<TeamWhereUniqueInput[] | TeamWhereUniqueInput>;
  disconnect?: Maybe<TeamWhereUniqueInput[] | TeamWhereUniqueInput>;
  update?: Maybe<
    | TeamUpdateWithWhereUniqueWithoutTournamentInput[]
    | TeamUpdateWithWhereUniqueWithoutTournamentInput
  >;
  upsert?: Maybe<
    | TeamUpsertWithWhereUniqueWithoutTournamentInput[]
    | TeamUpsertWithWhereUniqueWithoutTournamentInput
  >;
  deleteMany?: Maybe<TeamScalarWhereInput[] | TeamScalarWhereInput>;
  updateMany?: Maybe<
    TeamUpdateManyWithWhereNestedInput[] | TeamUpdateManyWithWhereNestedInput
  >;
}

export interface TeamUpdateWithWhereUniqueWithoutTournamentInput {
  where: TeamWhereUniqueInput;
  data: TeamUpdateWithoutTournamentDataInput;
}

export interface TeamUpdateWithoutTournamentDataInput {
  name?: Maybe<String>;
  players?: Maybe<PlayerUpdateManyWithoutTeamInput>;
}

export interface TeamUpsertWithWhereUniqueWithoutTournamentInput {
  where: TeamWhereUniqueInput;
  update: TeamUpdateWithoutTournamentDataInput;
  create: TeamCreateWithoutTournamentInput;
}

export interface TeamScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<TeamScalarWhereInput[] | TeamScalarWhereInput>;
  OR?: Maybe<TeamScalarWhereInput[] | TeamScalarWhereInput>;
  NOT?: Maybe<TeamScalarWhereInput[] | TeamScalarWhereInput>;
}

export interface TeamUpdateManyWithWhereNestedInput {
  where: TeamScalarWhereInput;
  data: TeamUpdateManyDataInput;
}

export interface TeamUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface TournamentUpsertWithoutSeasonsInput {
  update: TournamentUpdateWithoutSeasonsDataInput;
  create: TournamentCreateWithoutSeasonsInput;
}

export interface SeasonUpsertWithoutSchedulesInput {
  update: SeasonUpdateWithoutSchedulesDataInput;
  create: SeasonCreateWithoutSchedulesInput;
}

export interface ScheduleUpsertWithoutMatchesInput {
  update: ScheduleUpdateWithoutMatchesDataInput;
  create: ScheduleCreateWithoutMatchesInput;
}

export interface PlayerCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  team: TeamCreateOneWithoutPlayersInput;
}

export interface TeamCreateOneWithoutPlayersInput {
  create?: Maybe<TeamCreateWithoutPlayersInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface TeamCreateWithoutPlayersInput {
  id?: Maybe<ID_Input>;
  name: String;
  tournament: TournamentCreateOneWithoutTeamsInput;
}

export interface PlayerUpdateInput {
  name?: Maybe<String>;
  team?: Maybe<TeamUpdateOneRequiredWithoutPlayersInput>;
}

export interface TeamUpdateOneRequiredWithoutPlayersInput {
  create?: Maybe<TeamCreateWithoutPlayersInput>;
  update?: Maybe<TeamUpdateWithoutPlayersDataInput>;
  upsert?: Maybe<TeamUpsertWithoutPlayersInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface TeamUpdateWithoutPlayersDataInput {
  name?: Maybe<String>;
  tournament?: Maybe<TournamentUpdateOneRequiredWithoutTeamsInput>;
}

export interface TeamUpsertWithoutPlayersInput {
  update: TeamUpdateWithoutPlayersDataInput;
  create: TeamCreateWithoutPlayersInput;
}

export interface PlayerUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ScheduleCreateInput {
  id?: Maybe<ID_Input>;
  week?: Maybe<Int>;
  matches?: Maybe<MatchCreateManyWithoutScheduleInput>;
  season: SeasonCreateOneWithoutSchedulesInput;
}

export interface ScheduleUpdateInput {
  week?: Maybe<Int>;
  matches?: Maybe<MatchUpdateManyWithoutScheduleInput>;
  season?: Maybe<SeasonUpdateOneRequiredWithoutSchedulesInput>;
}

export interface ScheduleUpdateManyMutationInput {
  week?: Maybe<Int>;
}

export interface SeasonCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  schedules?: Maybe<ScheduleCreateManyWithoutSeasonInput>;
  tournament: TournamentCreateOneWithoutSeasonsInput;
}

export interface SeasonUpdateInput {
  name?: Maybe<String>;
  schedules?: Maybe<ScheduleUpdateManyWithoutSeasonInput>;
  tournament?: Maybe<TournamentUpdateOneRequiredWithoutSeasonsInput>;
}

export interface SeasonUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface TeamUpdateInput {
  name?: Maybe<String>;
  tournament?: Maybe<TournamentUpdateOneRequiredWithoutTeamsInput>;
  players?: Maybe<PlayerUpdateManyWithoutTeamInput>;
}

export interface TeamUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface TournamentCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutTournamentsInput;
  name: String;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  teams?: Maybe<TeamCreateManyWithoutTournamentInput>;
  seasons?: Maybe<SeasonCreateManyWithoutTournamentInput>;
}

export interface TournamentUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutTournamentsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  teams?: Maybe<TeamUpdateManyWithoutTournamentInput>;
  seasons?: Maybe<SeasonUpdateManyWithoutTournamentInput>;
}

export interface TournamentUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  tournaments?: Maybe<TournamentCreateManyWithoutOwnerInput>;
}

export interface TournamentCreateManyWithoutOwnerInput {
  create?: Maybe<
    TournamentCreateWithoutOwnerInput[] | TournamentCreateWithoutOwnerInput
  >;
  connect?: Maybe<TournamentWhereUniqueInput[] | TournamentWhereUniqueInput>;
}

export interface TournamentCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  teams?: Maybe<TeamCreateManyWithoutTournamentInput>;
  seasons?: Maybe<SeasonCreateManyWithoutTournamentInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  tournaments?: Maybe<TournamentUpdateManyWithoutOwnerInput>;
}

export interface TournamentUpdateManyWithoutOwnerInput {
  create?: Maybe<
    TournamentCreateWithoutOwnerInput[] | TournamentCreateWithoutOwnerInput
  >;
  delete?: Maybe<TournamentWhereUniqueInput[] | TournamentWhereUniqueInput>;
  connect?: Maybe<TournamentWhereUniqueInput[] | TournamentWhereUniqueInput>;
  set?: Maybe<TournamentWhereUniqueInput[] | TournamentWhereUniqueInput>;
  disconnect?: Maybe<TournamentWhereUniqueInput[] | TournamentWhereUniqueInput>;
  update?: Maybe<
    | TournamentUpdateWithWhereUniqueWithoutOwnerInput[]
    | TournamentUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | TournamentUpsertWithWhereUniqueWithoutOwnerInput[]
    | TournamentUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<TournamentScalarWhereInput[] | TournamentScalarWhereInput>;
  updateMany?: Maybe<
    | TournamentUpdateManyWithWhereNestedInput[]
    | TournamentUpdateManyWithWhereNestedInput
  >;
}

export interface TournamentUpdateWithWhereUniqueWithoutOwnerInput {
  where: TournamentWhereUniqueInput;
  data: TournamentUpdateWithoutOwnerDataInput;
}

export interface TournamentUpdateWithoutOwnerDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  teams?: Maybe<TeamUpdateManyWithoutTournamentInput>;
  seasons?: Maybe<SeasonUpdateManyWithoutTournamentInput>;
}

export interface TournamentUpsertWithWhereUniqueWithoutOwnerInput {
  where: TournamentWhereUniqueInput;
  update: TournamentUpdateWithoutOwnerDataInput;
  create: TournamentCreateWithoutOwnerInput;
}

export interface TournamentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  start_not?: Maybe<DateTimeInput>;
  start_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_lt?: Maybe<DateTimeInput>;
  start_lte?: Maybe<DateTimeInput>;
  start_gt?: Maybe<DateTimeInput>;
  start_gte?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  end_not?: Maybe<DateTimeInput>;
  end_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_lt?: Maybe<DateTimeInput>;
  end_lte?: Maybe<DateTimeInput>;
  end_gt?: Maybe<DateTimeInput>;
  end_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TournamentScalarWhereInput[] | TournamentScalarWhereInput>;
  OR?: Maybe<TournamentScalarWhereInput[] | TournamentScalarWhereInput>;
  NOT?: Maybe<TournamentScalarWhereInput[] | TournamentScalarWhereInput>;
}

export interface TournamentUpdateManyWithWhereNestedInput {
  where: TournamentScalarWhereInput;
  data: TournamentUpdateManyDataInput;
}

export interface TournamentUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface MatchSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MatchWhereInput>;
  AND?: Maybe<MatchSubscriptionWhereInput[] | MatchSubscriptionWhereInput>;
  OR?: Maybe<MatchSubscriptionWhereInput[] | MatchSubscriptionWhereInput>;
  NOT?: Maybe<MatchSubscriptionWhereInput[] | MatchSubscriptionWhereInput>;
}

export interface PlayerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlayerWhereInput>;
  AND?: Maybe<PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput>;
  OR?: Maybe<PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput>;
  NOT?: Maybe<PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput>;
}

export interface ScheduleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ScheduleWhereInput>;
  AND?: Maybe<
    ScheduleSubscriptionWhereInput[] | ScheduleSubscriptionWhereInput
  >;
  OR?: Maybe<ScheduleSubscriptionWhereInput[] | ScheduleSubscriptionWhereInput>;
  NOT?: Maybe<
    ScheduleSubscriptionWhereInput[] | ScheduleSubscriptionWhereInput
  >;
}

export interface SeasonSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SeasonWhereInput>;
  AND?: Maybe<SeasonSubscriptionWhereInput[] | SeasonSubscriptionWhereInput>;
  OR?: Maybe<SeasonSubscriptionWhereInput[] | SeasonSubscriptionWhereInput>;
  NOT?: Maybe<SeasonSubscriptionWhereInput[] | SeasonSubscriptionWhereInput>;
}

export interface TeamSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TeamWhereInput>;
  AND?: Maybe<TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput>;
  OR?: Maybe<TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput>;
  NOT?: Maybe<TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput>;
}

export interface TournamentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TournamentWhereInput>;
  AND?: Maybe<
    TournamentSubscriptionWhereInput[] | TournamentSubscriptionWhereInput
  >;
  OR?: Maybe<
    TournamentSubscriptionWhereInput[] | TournamentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    TournamentSubscriptionWhereInput[] | TournamentSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Match {
  id: ID_Output;
}

export interface MatchPromise extends Promise<Match>, Fragmentable {
  id: () => Promise<ID_Output>;
  teamA: <T = TeamPromise>() => T;
  teamB: <T = TeamPromise>() => T;
  schedule: <T = SchedulePromise>() => T;
}

export interface MatchSubscription
  extends Promise<AsyncIterator<Match>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  teamA: <T = TeamSubscription>() => T;
  teamB: <T = TeamSubscription>() => T;
  schedule: <T = ScheduleSubscription>() => T;
}

export interface MatchNullablePromise
  extends Promise<Match | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  teamA: <T = TeamPromise>() => T;
  teamB: <T = TeamPromise>() => T;
  schedule: <T = SchedulePromise>() => T;
}

export interface Team {
  id: ID_Output;
  name: String;
}

export interface TeamPromise extends Promise<Team>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  tournament: <T = TournamentPromise>() => T;
  players: <T = FragmentableArray<Player>>(args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TeamSubscription
  extends Promise<AsyncIterator<Team>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  tournament: <T = TournamentSubscription>() => T;
  players: <T = Promise<AsyncIterator<PlayerSubscription>>>(args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TeamNullablePromise
  extends Promise<Team | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  tournament: <T = TournamentPromise>() => T;
  players: <T = FragmentableArray<Player>>(args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Tournament {
  id: ID_Output;
  name: String;
  description?: String;
  start?: DateTimeOutput;
  end?: DateTimeOutput;
}

export interface TournamentPromise extends Promise<Tournament>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  teams: <T = FragmentableArray<Team>>(args?: {
    where?: TeamWhereInput;
    orderBy?: TeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  seasons: <T = FragmentableArray<Season>>(args?: {
    where?: SeasonWhereInput;
    orderBy?: SeasonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TournamentSubscription
  extends Promise<AsyncIterator<Tournament>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  teams: <T = Promise<AsyncIterator<TeamSubscription>>>(args?: {
    where?: TeamWhereInput;
    orderBy?: TeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  seasons: <T = Promise<AsyncIterator<SeasonSubscription>>>(args?: {
    where?: SeasonWhereInput;
    orderBy?: SeasonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TournamentNullablePromise
  extends Promise<Tournament | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  teams: <T = FragmentableArray<Team>>(args?: {
    where?: TeamWhereInput;
    orderBy?: TeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  seasons: <T = FragmentableArray<Season>>(args?: {
    where?: SeasonWhereInput;
    orderBy?: SeasonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  tournaments: <T = FragmentableArray<Tournament>>(args?: {
    where?: TournamentWhereInput;
    orderBy?: TournamentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  tournaments: <T = Promise<AsyncIterator<TournamentSubscription>>>(args?: {
    where?: TournamentWhereInput;
    orderBy?: TournamentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  tournaments: <T = FragmentableArray<Tournament>>(args?: {
    where?: TournamentWhereInput;
    orderBy?: TournamentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Season {
  id: ID_Output;
  name: String;
}

export interface SeasonPromise extends Promise<Season>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  schedules: <T = FragmentableArray<Schedule>>(args?: {
    where?: ScheduleWhereInput;
    orderBy?: ScheduleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tournament: <T = TournamentPromise>() => T;
}

export interface SeasonSubscription
  extends Promise<AsyncIterator<Season>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  schedules: <T = Promise<AsyncIterator<ScheduleSubscription>>>(args?: {
    where?: ScheduleWhereInput;
    orderBy?: ScheduleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tournament: <T = TournamentSubscription>() => T;
}

export interface SeasonNullablePromise
  extends Promise<Season | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  schedules: <T = FragmentableArray<Schedule>>(args?: {
    where?: ScheduleWhereInput;
    orderBy?: ScheduleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tournament: <T = TournamentPromise>() => T;
}

export interface Schedule {
  id: ID_Output;
  week?: Int;
}

export interface SchedulePromise extends Promise<Schedule>, Fragmentable {
  id: () => Promise<ID_Output>;
  week: () => Promise<Int>;
  matches: <T = FragmentableArray<Match>>(args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  season: <T = SeasonPromise>() => T;
}

export interface ScheduleSubscription
  extends Promise<AsyncIterator<Schedule>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  week: () => Promise<AsyncIterator<Int>>;
  matches: <T = Promise<AsyncIterator<MatchSubscription>>>(args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  season: <T = SeasonSubscription>() => T;
}

export interface ScheduleNullablePromise
  extends Promise<Schedule | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  week: () => Promise<Int>;
  matches: <T = FragmentableArray<Match>>(args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  season: <T = SeasonPromise>() => T;
}

export interface Player {
  id: ID_Output;
  name: String;
}

export interface PlayerPromise extends Promise<Player>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  team: <T = TeamPromise>() => T;
}

export interface PlayerSubscription
  extends Promise<AsyncIterator<Player>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  team: <T = TeamSubscription>() => T;
}

export interface PlayerNullablePromise
  extends Promise<Player | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  team: <T = TeamPromise>() => T;
}

export interface MatchConnection {
  pageInfo: PageInfo;
  edges: MatchEdge[];
}

export interface MatchConnectionPromise
  extends Promise<MatchConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MatchEdge>>() => T;
  aggregate: <T = AggregateMatchPromise>() => T;
}

export interface MatchConnectionSubscription
  extends Promise<AsyncIterator<MatchConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MatchEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMatchSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface MatchEdge {
  node: Match;
  cursor: String;
}

export interface MatchEdgePromise extends Promise<MatchEdge>, Fragmentable {
  node: <T = MatchPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MatchEdgeSubscription
  extends Promise<AsyncIterator<MatchEdge>>,
    Fragmentable {
  node: <T = MatchSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMatch {
  count: Int;
}

export interface AggregateMatchPromise
  extends Promise<AggregateMatch>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMatchSubscription
  extends Promise<AsyncIterator<AggregateMatch>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlayerConnection {
  pageInfo: PageInfo;
  edges: PlayerEdge[];
}

export interface PlayerConnectionPromise
  extends Promise<PlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlayerEdge>>() => T;
  aggregate: <T = AggregatePlayerPromise>() => T;
}

export interface PlayerConnectionSubscription
  extends Promise<AsyncIterator<PlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlayerSubscription>() => T;
}

export interface PlayerEdge {
  node: Player;
  cursor: String;
}

export interface PlayerEdgePromise extends Promise<PlayerEdge>, Fragmentable {
  node: <T = PlayerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlayerEdgeSubscription
  extends Promise<AsyncIterator<PlayerEdge>>,
    Fragmentable {
  node: <T = PlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlayer {
  count: Int;
}

export interface AggregatePlayerPromise
  extends Promise<AggregatePlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlayerSubscription
  extends Promise<AsyncIterator<AggregatePlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ScheduleConnection {
  pageInfo: PageInfo;
  edges: ScheduleEdge[];
}

export interface ScheduleConnectionPromise
  extends Promise<ScheduleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ScheduleEdge>>() => T;
  aggregate: <T = AggregateSchedulePromise>() => T;
}

export interface ScheduleConnectionSubscription
  extends Promise<AsyncIterator<ScheduleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ScheduleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateScheduleSubscription>() => T;
}

export interface ScheduleEdge {
  node: Schedule;
  cursor: String;
}

export interface ScheduleEdgePromise
  extends Promise<ScheduleEdge>,
    Fragmentable {
  node: <T = SchedulePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ScheduleEdgeSubscription
  extends Promise<AsyncIterator<ScheduleEdge>>,
    Fragmentable {
  node: <T = ScheduleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSchedule {
  count: Int;
}

export interface AggregateSchedulePromise
  extends Promise<AggregateSchedule>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateScheduleSubscription
  extends Promise<AsyncIterator<AggregateSchedule>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SeasonConnection {
  pageInfo: PageInfo;
  edges: SeasonEdge[];
}

export interface SeasonConnectionPromise
  extends Promise<SeasonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SeasonEdge>>() => T;
  aggregate: <T = AggregateSeasonPromise>() => T;
}

export interface SeasonConnectionSubscription
  extends Promise<AsyncIterator<SeasonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SeasonEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSeasonSubscription>() => T;
}

export interface SeasonEdge {
  node: Season;
  cursor: String;
}

export interface SeasonEdgePromise extends Promise<SeasonEdge>, Fragmentable {
  node: <T = SeasonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SeasonEdgeSubscription
  extends Promise<AsyncIterator<SeasonEdge>>,
    Fragmentable {
  node: <T = SeasonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSeason {
  count: Int;
}

export interface AggregateSeasonPromise
  extends Promise<AggregateSeason>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSeasonSubscription
  extends Promise<AsyncIterator<AggregateSeason>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TeamConnection {
  pageInfo: PageInfo;
  edges: TeamEdge[];
}

export interface TeamConnectionPromise
  extends Promise<TeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeamEdge>>() => T;
  aggregate: <T = AggregateTeamPromise>() => T;
}

export interface TeamConnectionSubscription
  extends Promise<AsyncIterator<TeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeamSubscription>() => T;
}

export interface TeamEdge {
  node: Team;
  cursor: String;
}

export interface TeamEdgePromise extends Promise<TeamEdge>, Fragmentable {
  node: <T = TeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeamEdgeSubscription
  extends Promise<AsyncIterator<TeamEdge>>,
    Fragmentable {
  node: <T = TeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTeam {
  count: Int;
}

export interface AggregateTeamPromise
  extends Promise<AggregateTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeamSubscription
  extends Promise<AsyncIterator<AggregateTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TournamentConnection {
  pageInfo: PageInfo;
  edges: TournamentEdge[];
}

export interface TournamentConnectionPromise
  extends Promise<TournamentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TournamentEdge>>() => T;
  aggregate: <T = AggregateTournamentPromise>() => T;
}

export interface TournamentConnectionSubscription
  extends Promise<AsyncIterator<TournamentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TournamentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTournamentSubscription>() => T;
}

export interface TournamentEdge {
  node: Tournament;
  cursor: String;
}

export interface TournamentEdgePromise
  extends Promise<TournamentEdge>,
    Fragmentable {
  node: <T = TournamentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TournamentEdgeSubscription
  extends Promise<AsyncIterator<TournamentEdge>>,
    Fragmentable {
  node: <T = TournamentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTournament {
  count: Int;
}

export interface AggregateTournamentPromise
  extends Promise<AggregateTournament>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTournamentSubscription
  extends Promise<AsyncIterator<AggregateTournament>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface MatchSubscriptionPayload {
  mutation: MutationType;
  node: Match;
  updatedFields: String[];
  previousValues: MatchPreviousValues;
}

export interface MatchSubscriptionPayloadPromise
  extends Promise<MatchSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MatchPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MatchPreviousValuesPromise>() => T;
}

export interface MatchSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MatchSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MatchSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MatchPreviousValuesSubscription>() => T;
}

export interface MatchPreviousValues {
  id: ID_Output;
}

export interface MatchPreviousValuesPromise
  extends Promise<MatchPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface MatchPreviousValuesSubscription
  extends Promise<AsyncIterator<MatchPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface PlayerSubscriptionPayload {
  mutation: MutationType;
  node: Player;
  updatedFields: String[];
  previousValues: PlayerPreviousValues;
}

export interface PlayerSubscriptionPayloadPromise
  extends Promise<PlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlayerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlayerPreviousValuesPromise>() => T;
}

export interface PlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlayerPreviousValuesSubscription>() => T;
}

export interface PlayerPreviousValues {
  id: ID_Output;
  name: String;
}

export interface PlayerPreviousValuesPromise
  extends Promise<PlayerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface PlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<PlayerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ScheduleSubscriptionPayload {
  mutation: MutationType;
  node: Schedule;
  updatedFields: String[];
  previousValues: SchedulePreviousValues;
}

export interface ScheduleSubscriptionPayloadPromise
  extends Promise<ScheduleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SchedulePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SchedulePreviousValuesPromise>() => T;
}

export interface ScheduleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ScheduleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ScheduleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SchedulePreviousValuesSubscription>() => T;
}

export interface SchedulePreviousValues {
  id: ID_Output;
  week?: Int;
}

export interface SchedulePreviousValuesPromise
  extends Promise<SchedulePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  week: () => Promise<Int>;
}

export interface SchedulePreviousValuesSubscription
  extends Promise<AsyncIterator<SchedulePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  week: () => Promise<AsyncIterator<Int>>;
}

export interface SeasonSubscriptionPayload {
  mutation: MutationType;
  node: Season;
  updatedFields: String[];
  previousValues: SeasonPreviousValues;
}

export interface SeasonSubscriptionPayloadPromise
  extends Promise<SeasonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SeasonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SeasonPreviousValuesPromise>() => T;
}

export interface SeasonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SeasonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SeasonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SeasonPreviousValuesSubscription>() => T;
}

export interface SeasonPreviousValues {
  id: ID_Output;
  name: String;
}

export interface SeasonPreviousValuesPromise
  extends Promise<SeasonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface SeasonPreviousValuesSubscription
  extends Promise<AsyncIterator<SeasonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TeamSubscriptionPayload {
  mutation: MutationType;
  node: Team;
  updatedFields: String[];
  previousValues: TeamPreviousValues;
}

export interface TeamSubscriptionPayloadPromise
  extends Promise<TeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeamPreviousValuesPromise>() => T;
}

export interface TeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeamPreviousValuesSubscription>() => T;
}

export interface TeamPreviousValues {
  id: ID_Output;
  name: String;
}

export interface TeamPreviousValuesPromise
  extends Promise<TeamPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface TeamPreviousValuesSubscription
  extends Promise<AsyncIterator<TeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TournamentSubscriptionPayload {
  mutation: MutationType;
  node: Tournament;
  updatedFields: String[];
  previousValues: TournamentPreviousValues;
}

export interface TournamentSubscriptionPayloadPromise
  extends Promise<TournamentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TournamentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TournamentPreviousValuesPromise>() => T;
}

export interface TournamentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TournamentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TournamentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TournamentPreviousValuesSubscription>() => T;
}

export interface TournamentPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  start?: DateTimeOutput;
  end?: DateTimeOutput;
}

export interface TournamentPreviousValuesPromise
  extends Promise<TournamentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
}

export interface TournamentPreviousValuesSubscription
  extends Promise<AsyncIterator<TournamentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Tournament",
    embedded: false
  },
  {
    name: "Team",
    embedded: false
  },
  {
    name: "Player",
    embedded: false
  },
  {
    name: "Season",
    embedded: false
  },
  {
    name: "Schedule",
    embedded: false
  },
  {
    name: "Match",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/public-citrineguardian-909/server-1/dev`
});
export const prisma = new Prisma();
